layerId = as.character(asl_data()$productivity_index))
qMap
})
}
)
library(utils)
library(stats)
library(utils)
library(datasets)
library(graphics)
library(shiny)
library(grDevices)
library(methods)
library(leaflet)
library(dplyr)
library(shinycssloaders)
library(rgdal)
library(plotly)
library(htmltools)
library(DT)
library(shinyjs)
library(shinythemes)
library(rsconnect)
data <- read.csv(file = 'DataInventory.csv')
shiny(ui=fluidPage(
theme = shinytheme("flatly"),
#Application Title
titlePanel("AYK Chinook Salmon Datasets"),
#Adding a side panel to filter through the data
sidebarLayout(
sidebarPanel(
radioButtons(inputId = "Productivity",
label= "Productivity:",
choices=unique(data$productivity)),
radioButtons(inputId = "ASL",
label= "Age Data:",
choices=unique(data$asl)),
sliderInput("n_years",
"Minimum Years of Data:",
min = 1,
max = 50,
value = 1)
),
#What to include in the main panel (here it is the map)
mainPanel("Data Inventory",leafletOutput("AYK"),
dataTableOutput("table")
)
)
),
server = function(input, output, session) {
#creating a reactive object that filters base on the selecetion of ASL data
#creating a reactive object that filters base on the selecetion of ASL data
asl_data <- reactive({
data %>%
filter(asl == input$ASL)%>%
filter(productivity == input$Productivity)%>%
filter(yrs_data >= input$n_years)
})
output$table<- DT::renderDataTable(
asl_data(), server=FALSE,  selection = "single"
)
# to keep track of previously selected row
prev_row <- reactiveVal()
# new icon style
highlight_icon = makeAwesomeIcon(icon = 'flag', markerColor = 'red', iconColor = 'white') #creating the icon that will pop up
observeEvent(input$table_rows_selected, {
row_selected = asl_data()[input$table_rows_selected,] #the input is a row selected from the filtered table
proxy <- leafletProxy('AYK')
print(row_selected)
proxy %>%
addAwesomeMarkers(popup=as.character(row_selected$productivity_index),
layerId = as.character(row_selected$productivity_index),
lng=row_selected$long,
lat=row_selected$lat,
icon = highlight_icon)
# Reset previously selected marker
if(!is.null(prev_row()))
{
proxy %>%
addMarkers(popup=as.character(prev_row()$productivity_index),
layerId = as.character(prev_row()$productivity_index),
lng=prev_row()$long,
lat=prev_row()$lat)
}
# set new value to reactiveVal
prev_row(row_selected)
})
# map
output$AYK <- renderLeaflet({
qMap <-leaflet(data = asl_data()) %>%
setView(lng = -160.5594136, lat = 62.8883491, zoom = 4)%>%
addTiles() %>%
addMarkers(popup=~as.character(asl_data()$productivity_index),
layerId = as.character(asl_data()$productivity_index))
qMap
})
}
)
shinyApp(ui=fluidPage(
theme = shinytheme("flatly"),
#Application Title
titlePanel("AYK Chinook Salmon Datasets"),
#Adding a side panel to filter through the data
sidebarLayout(
sidebarPanel(
radioButtons(inputId = "Productivity",
label= "Productivity:",
choices=unique(data$productivity)),
radioButtons(inputId = "ASL",
label= "Age Data:",
choices=unique(data$asl)),
sliderInput("n_years",
"Minimum Years of Data:",
min = 1,
max = 50,
value = 1)
),
#What to include in the main panel (here it is the map)
mainPanel("Data Inventory",leafletOutput("AYK"),
dataTableOutput("table")
)
)
),
server = function(input, output, session) {
#creating a reactive object that filters base on the selecetion of ASL data
#creating a reactive object that filters base on the selecetion of ASL data
asl_data <- reactive({
data %>%
filter(asl == input$ASL)%>%
filter(productivity == input$Productivity)%>%
filter(yrs_data >= input$n_years)
})
output$table<- DT::renderDataTable(
asl_data(), server=FALSE,  selection = "single"
)
# to keep track of previously selected row
prev_row <- reactiveVal()
# new icon style
highlight_icon = makeAwesomeIcon(icon = 'flag', markerColor = 'red', iconColor = 'white') #creating the icon that will pop up
observeEvent(input$table_rows_selected, {
row_selected = asl_data()[input$table_rows_selected,] #the input is a row selected from the filtered table
proxy <- leafletProxy('AYK')
print(row_selected)
proxy %>%
addAwesomeMarkers(popup=as.character(row_selected$productivity_index),
layerId = as.character(row_selected$productivity_index),
lng=row_selected$long,
lat=row_selected$lat,
icon = highlight_icon)
# Reset previously selected marker
if(!is.null(prev_row()))
{
proxy %>%
addMarkers(popup=as.character(prev_row()$productivity_index),
layerId = as.character(prev_row()$productivity_index),
lng=prev_row()$long,
lat=prev_row()$lat)
}
# set new value to reactiveVal
prev_row(row_selected)
})
# map
output$AYK <- renderLeaflet({
qMap <-leaflet(data = asl_data()) %>%
setView(lng = -160.5594136, lat = 62.8883491, zoom = 4)%>%
addTiles() %>%
addMarkers(popup=~as.character(asl_data()$productivity_index),
layerId = as.character(asl_data()$productivity_index))
qMap
})
}
)
# Chunk 1: libs
library(utils)
library(stats)
library(utils)
library(datasets)
library(graphics)
library(shiny)
library(grDevices)
library(methods)
library(leaflet)
library(dplyr)
library(shinycssloaders)
library(rgdal)
library(plotly)
library(htmltools)
library(DT)
library(shinyjs)
library(shinythemes)
library(rsconnect)
data <- read.csv(file = 'DataInventory.csv')
# Chunk 2: shiny
shinyApp(ui=fluidPage(
theme = shinytheme("flatly"),
#Application Title
titlePanel("AYK Chinook Salmon Datasets"),
#Adding a side panel to filter through the data
sidebarLayout(
sidebarPanel(
radioButtons(inputId = "Productivity",
label= "Productivity:",
choices=unique(data$productivity)),
radioButtons(inputId = "ASL",
label= "Age Data:",
choices=unique(data$asl)),
sliderInput("n_years",
"Minimum Years of Data:",
min = 1,
max = 50,
value = 1)
),
#What to include in the main panel (here it is the map)
mainPanel("Data Inventory",leafletOutput("AYK"),
dataTableOutput("table")
)
)
),
server = function(input, output, session) {
#creating a reactive object that filters base on the selecetion of ASL data
#creating a reactive object that filters base on the selecetion of ASL data
asl_data <- reactive({
data %>%
filter(asl == input$ASL)%>%
filter(productivity == input$Productivity)%>%
filter(yrs_data >= input$n_years)
})
output$table<- DT::renderDataTable(
asl_data(), server=FALSE,  selection = "single"
)
# to keep track of previously selected row
prev_row <- reactiveVal()
# new icon style
highlight_icon = makeAwesomeIcon(icon = 'flag', markerColor = 'red', iconColor = 'white') #creating the icon that will pop up
observeEvent(input$table_rows_selected, {
row_selected = asl_data()[input$table_rows_selected,] #the input is a row selected from the filtered table
proxy <- leafletProxy('AYK')
print(row_selected)
proxy %>%
addAwesomeMarkers(popup=as.character(row_selected$productivity_index),
layerId = as.character(row_selected$productivity_index),
lng=row_selected$long,
lat=row_selected$lat,
icon = highlight_icon)
# Reset previously selected marker
if(!is.null(prev_row()))
{
proxy %>%
addMarkers(popup=as.character(prev_row()$productivity_index),
layerId = as.character(prev_row()$productivity_index),
lng=prev_row()$long,
lat=prev_row()$lat)
}
# set new value to reactiveVal
prev_row(row_selected)
})
# map
output$AYK <- renderLeaflet({
qMap <-leaflet(data = asl_data()) %>%
setView(lng = -160.5594136, lat = 62.8883491, zoom = 4)%>%
addTiles() %>%
addMarkers(popup=~as.character(asl_data()$productivity_index),
layerId = as.character(asl_data()$productivity_index))
qMap
})
}
)
shinyApp(ui=fluidPage(
theme = shinytheme("flatly"),
#Application Title
titlePanel("AYK Chinook Salmon Datasets"),
#Adding a side panel to filter through the data
sidebarLayout(
sidebarPanel(
radioButtons(inputId = "Productivity",
label= "Productivity:",
choices=unique(data$productivity)),
radioButtons(inputId = "ASL",
label= "Age Data:",
choices=unique(data$asl)),
sliderInput("n_years",
"Minimum Years of Data:",
min = 1,
max = 50,
value = 1)
),
#What to include in the main panel (here it is the map)
mainPanel("Data Inventory",leafletOutput("AYK"),
dataTableOutput("table")
)
)
),
server = function(input, output, session) {
#creating a reactive object that filters base on the selecetion of ASL data
#creating a reactive object that filters base on the selecetion of ASL data
asl_data <- reactive({
data %>%
filter(asl == input$ASL)%>%
filter(productivity == input$Productivity)%>%
filter(yrs_data >= input$n_years)
})
output$table<- DT::renderDataTable(
asl_data(), server=FALSE,  selection = "single"
)
# to keep track of previously selected row
prev_row <- reactiveVal()
# new icon style
highlight_icon = makeAwesomeIcon(icon = 'flag', markerColor = 'red', iconColor = 'white') #creating the icon that will pop up
observeEvent(input$table_rows_selected, {
row_selected = asl_data()[input$table_rows_selected,] #the input is a row selected from the filtered table
proxy <- leafletProxy('AYK')
print(row_selected)
proxy %>%
addAwesomeMarkers(popup=as.character(row_selected$productivity_index),
layerId = as.character(row_selected$productivity_index),
lng=row_selected$long,
lat=row_selected$lat,
icon = highlight_icon)
# Reset previously selected marker
if(!is.null(prev_row()))
{
proxy %>%
addMarkers(popup=as.character(prev_row()$productivity_index),
layerId = as.character(prev_row()$productivity_index),
lng=prev_row()$long,
lat=prev_row()$lat)
}
# set new value to reactiveVal
prev_row(row_selected)
})
# map
output$AYK <- renderLeaflet({
qMap <-leaflet(data = asl_data()) %>%
setView(lng = -160.5594136, lat = 62.8883491, zoom = 4)%>%
addTiles() %>%
addMarkers(popup=~as.character(asl_data()$productivity_index),
layerId = as.character(asl_data()$productivity_index))
qMap
})
}
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(utils)
library(stats)
library(utils)
library(datasets)
library(graphics)
library(shiny)
library(grDevices)
library(methods)
library(leaflet)
library(dplyr)
library(shinycssloaders)
library(rgdal)
library(plotly)
library(htmltools)
library(DT)
library(shinyjs)
library(shinythemes)
library(rsconnect)
library(crosstalk)
data <- read.csv(file = 'DataInventory.csv')
# Wrap data frame in SharedData
sd <- SharedData$new(quakes[sample(nrow(quakes), 100),])
# Create a filter input
filter_slider("mag", "Magnitude", sd, column=~mag, step=0.1, width=250)
# Use SharedData like a dataframe with Crosstalk-enabled widgets
bscols(
leaflet(sd) %>% addTiles() %>% addMarkers(),
datatable(sd, extensions="Scroller", style="bootstrap", class="compact", width="100%",
options=list(deferRender=TRUE, scrollY=300, scroller=TRUE))
)
# Wrap data frame in SharedData
sd <-data
# Create a filter input
filter_slider("asl", "Age Data:", sd, column=~asl, step=0.1, width=250)
# Use SharedData like a dataframe with Crosstalk-enabled widgets
bscols(
leaflet(sd) %>% addTiles() %>% addMarkers(),
datatable(sd, extensions="Scroller", style="bootstrap", class="compact", width="100%",
options=list(deferRender=TRUE, scrollY=300, scroller=TRUE))
)
# Wrap data frame in SharedData
sd <- SharedData$new(quakes[sample(nrow(quakes), 100),])
# Create a filter input
filter_slider("mag", "Magnitude", sd, column=~mag, step=0.1, width=250)
# Use SharedData like a dataframe with Crosstalk-enabled widgets
bscols(
leaflet(sd) %>% addTiles() %>% addMarkers(),
datatable(sd, extensions="Scroller", style="bootstrap", class="compact", width="100%",
options=list(deferRender=TRUE, scrollY=300, scroller=TRUE))
)
quakes
SharedData$new
# Wrap data frame in SharedData
sd <-SharedData$new(data[sample(nrow(data), 100),])
# Create a filter input
filter_slider("asl", "Age Data:", sd, column=~asl, step=0.1, width=250)
# Use SharedData like a dataframe with Crosstalk-enabled widgets
bscols(
leaflet(sd) %>% addTiles() %>% addMarkers(),
datatable(sd, extensions="Scroller", style="bootstrap", class="compact", width="100%",
options=list(deferRender=TRUE, scrollY=300, scroller=TRUE))
)
# Wrap data frame in SharedData
sd <-SharedData$new(data)
# Create a filter input
filter_slider("asl", "Age Data:", sd, column=~asl, step=0.1, width=250)
# Use SharedData like a dataframe with Crosstalk-enabled widgets
bscols(
leaflet(sd) %>% addTiles() %>% addMarkers(),
datatable(sd, extensions="Scroller", style="bootstrap", class="compact", width="100%",
options=list(deferRender=TRUE, scrollY=300, scroller=TRUE))
)
# Wrap data frame in SharedData
sd <-SharedData$new(data)
# Create a filter input
filter_slider("asl", "Age Data:", sd, column=~asl, step=0.1, width=250)
# Use SharedData like a dataframe with Crosstalk-enabled widgets
bscols(
leaflet(sd) %>% addTiles() %>% addMarkers(),
datatable(sd, extensions="Scroller", style="bootstrap", class="compact", width="100%",
options=list(deferRender=TRUE, scrollY=300, scroller=TRUE))
)
# Wrap data frame in SharedData
sd <- SharedData$new(quakes[sample(nrow(quakes), 100),])
# Create a filter input
filter_slider("mag", "Magnitude", sd, column=~mag, step=0.1, width=250)
# Use SharedData like a dataframe with Crosstalk-enabled widgets
bscols(
leaflet(sd) %>% addTiles() %>% addMarkers(),
datatable(sd, extensions="Scroller", style="bootstrap", class="compact", width="100%",
options=list(deferRender=TRUE, scrollY=300, scroller=TRUE))
)
library(utils)
library(stats)
library(utils)
library(datasets)
library(graphics)
library(shiny)
library(grDevices)
library(methods)
library(leaflet)
library(dplyr)
library(shinycssloaders)
library(rgdal)
library(plotly)
library(htmltools)
library(DT)
library(shinyjs)
library(shinythemes)
library(rsconnect)
library(crosstalk)
library(htmlwidgets)
data <- read.csv(file = 'DataInventory.csv')
# Wrap data frame in SharedData
sd <- SharedData$new(quakes[sample(nrow(quakes), 100),])
# Create a filter input
filter_slider("mag", "Magnitude", sd, column=~mag, step=0.1, width=250)
# Use SharedData like a dataframe with Crosstalk-enabled widgets
bscols(
leaflet(sd) %>% addTiles() %>% addMarkers(),
datatable(sd, extensions="Scroller", style="bootstrap", class="compact", width="100%",
options=list(deferRender=TRUE, scrollY=300, scroller=TRUE))
)
runApp()
# Wrap data frame in SharedData
sd <- SharedData$new(quakes[sample(nrow(quakes), 100),])
# Create a filter input
filter_slider("mag", "Magnitude", sd, column=~mag, step=0.1, width=250)
# Use SharedData like a dataframe with Crosstalk-enabled widgets
bscols(
leaflet(sd) %>% addTiles() %>% addMarkers(),
datatable(sd, extensions="Scroller", style="bootstrap", class="compact", width="100%",
options=list(deferRender=TRUE, scrollY=300, scroller=TRUE))
)
quakes
runApp()
runApp()
runApp()
