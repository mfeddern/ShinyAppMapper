ggplot(data = data_long, aes(x = Year,  y=DataType, size = Escapement, col=DataType)) + geom_point(alpha=0.7)+
facet_wrap(~Location)+
scale_size(range = c(2, 2), limits = c(0.5, 1.5))
ggplot(data = subset(data_long, Region=='Yukon (US))'), aes(x = Year,  y=DataType, size = Escapement, col=DataType)) + geom_point(alpha=0.7)+
facet_wrap(~Location)+
scale_size(range = c(2, 2), limits = c(0.5, 1.5))
data <- read.csv(file = 'DataSumm_EscHarAge.csv')
data_long <- gather(data, key= "DataType",value="Escapement", Escapement..weir., Escapement..tower., Escapement..sonar., Age, Aerial.Survey)
ggplot(data = subset(data_long, Region=='Yukon (US))'), aes(x = Year,  y=DataType, size = Escapement, col=DataType)) + geom_point(alpha=0.7)+
facet_wrap(~Location)+
scale_size(range = c(2, 2), limits = c(0.5, 1.5))
head (data_;long)
head(data_long)
ggplot(data = subset(data_long, Region=='Yukon (US)'), aes(x = Year,  y=DataType, size = Escapement, col=DataType)) + geom_point(alpha=0.7)+
facet_wrap(~Location)+
scale_size(range = c(2, 2), limits = c(0.5, 1.5))
data <- read.csv(file = 'DataSumm_EscHarAge.csv')
data_long <- gather(data, key= "DataType",value="Escapement", Escapement..weir., Escapement..tower., Escapement..sonar., Age, Aerial.Survey)
ggplot(data = subset(data_long, Region=='Yukon (US)'), aes(x = Year,  y=DataType, size = Escapement, col=DataType)) + geom_point(alpha=0.7)+
facet_wrap(~Location)+
scale_size(range = c(2, 2), limits = c(0.5, 1.5))
data_long_Yukon <- data_long %>% filter(Region =='Yukon (US)')
data_long_Yukon
data <- read.csv(file = 'DataSumm_EscHarAge.csv')
data_long_Yukon <- data %>% filter(Region =='Yukon (US)')
data_Yukon <- data %>% filter(Region =='Yukon (US)')
data_Yukon
data_long_Yukon <- gather(data_Yukon, key= "DataType",value="Escapement", Escapement..weir., Escapement..tower., Escapement..sonar., Age, Aerial.Survey)
data <- read.csv(file = 'DataSumm_EscHarAge.csv')
data_Yukon <- data %>% filter(Region =='Yukon (US)')
data_long_Yukon <- gather(data_Yukon, key= "DataType",value="Escapement", Escapement..weir., Escapement..tower., Escapement..sonar., Age, Aerial.Survey)
ggplot(data = subset(data_long, Region=='Yukon (US)'), aes(x = Year,  y=DataType, size = Escapement, col=DataType)) + geom_point(alpha=0.7)+
facet_wrap(~Location)+
scale_size(range = c(2, 2), limits = c(0.5, 1.5))
data_long_Yukon
ggplot(data = subset(data_long_Yukon, aes(x = Year,  y=DataType, size = Escapement, col=DataType)) + geom_point(alpha=0.7)+
ggplot(data = subset(data_long_Yukon, aes(x = Year,  y=DataType, size = Escapement, col=DataType)) + geom_point(alpha=0.7)+
scale_size(range = c(2, 2), limits = c(0.5, 1.5))
scale_size(range = c(2, 2), limits = c(0.5, 1.5))
ggplot(data = subset(data_long_Yukon, aes(x = Year,  y=DataType, size = Escapement, col=DataType)) + geom_point(alpha=0.7)+
scale_size(range = c(2, 2), limits = c(0.5, 1.5))
ggplot(data = subset(data_long_Yukon, aes(x = Year,  y=DataType, size = Escapement, col=DataType)) + geom_point(alpha=0.7)+
facet_wrap(~Location)+
scale_size(range = c(2, 2), limits = c(0.5, 1.5))
ggplot(data = subset(data_long_Yukon, aes(x = Year,  y=DataType, size = Escapement, col=DataType)) + geom_point(alpha=0.7)+
facet_wrap(~Location)+
scale_size(range = c(2, 2), limits = c(0.5, 1.5))
ggplot(data = data_long_Yukon, aes(x = Year,  y=DataType, size = Escapement, col=DataType)) + geom_point(alpha=0.7)+
facet_wrap(~Location)+
scale_size(range = c(2, 2), limits = c(0.5, 1.5))
ggplot(data = data_long_Yukon, aes(x = Year,  y=DataType, size = Escapement, col=DataType)) + geom_point(alpha=0.7)+
facet_wrap(~Location)+
scale_size(range = c(2, 2), limits = c(0.5, 1.5))
data <- read.csv(file = 'DataSumm_EscHarAge.csv')
data_Yukon <- data %>% filter(Region =='Yukon (US)')
data_long_Yukon <- gather(data_Yukon, key= "DataType",value="Escapement", Escapement..weir., Escapement..tower., Escapement..sonar., Age, Aerial.Survey)
ggplot(data = data_long_Yukon, aes(x = Year,  y=DataType, size = Escapement, col=DataType)) + geom_point(alpha=0.7)+
facet_wrap(~Location)+
scale_size(range = c(2, 2), limits = c(0.5, 1.5))
YukonUS.plot <- ggplot(data = data_long_Yukon, aes(x = Year,  y=DataType, size = Escapement, col=DataType)) + geom_point(alpha=0.7)+
facet_wrap(~Location)+
scale_size(range = c(2, 2), limits = c(0.5, 1.5))
YukonUS.plot
YukonUS.plot<- ggplot(data = data_long_YukonUS, aes(x = Year,  y=DataType, size = Escapement, col=DataType)) + geom_point(alpha=0.7)+
facet_wrap(~Location)+
scale_size(range = c(2, 2), limits = c(0.5, 1.5))
data <- read.csv(file = 'DataSumm_EscHarAge.csv')
data_YukonUS <- data %>% filter(Region =='Yukon (US)')
data_long_YukonUS <- gather(data_Yukon, key= "DataType",value="Escapement", Escapement..weir., Escapement..tower., Escapement..sonar., Age, Aerial.Survey)
YukonUS.plot<- ggplot(data = data_long_YukonUS, aes(x = Year,  y=DataType, size = Escapement, col=DataType)) + geom_point(alpha=0.7)+
facet_wrap(~Location)+
scale_size(range = c(2, 2), limits = c(0.5, 1.5))
YukonUS.plot
data_YukonCA <- data %>% filter(Region =='Yukon (CA)')
data_YukonUS <- data %>% filter(Region =='Yukon (US)')
data_long_YukonUS <- gather(data_YukonUS, key= "DataType",value="Escapement", Escapement..weir., Escapement..tower., Escapement..sonar., Age, Aerial.Survey)
YukonUS.plot<- ggplot(data = data_long_YukonUS, aes(x = Year,  y=DataType, size = Escapement, col=DataType)) + geom_point(alpha=0.7)+
facet_wrap(~Location)+
scale_size(range = c(2, 2), limits = c(0.5, 1.5))
YukonUS.plot
data_YukonCA <- data %>% filter(Region =='Yukon (CA)')
data_long_YukonCA <- gather(data_YukonCA, key= "DataType",value="Escapement", Escapement..weir., Escapement..tower., Escapement..sonar., Age, Aerial.Survey)
YukonCA.plot<- ggplot(data = data_long_YukonCA, aes(x = Year,  y=DataType, size = Escapement, col=DataType)) + geom_point(alpha=0.7)+
facet_wrap(~Location)+
scale_size(range = c(2, 2), limits = c(0.5, 1.5))
YukonCA.plot
data_Kuskokwim <- data %>% filter(Region =='Kuskokwim')
data_long_Kukskokwim <- gather(data_Kuskokwim, key= "DataType",value="Escapement", Escapement..weir., Escapement..tower., Escapement..sonar., Age, Aerial.Survey)
data_Kuskokwim <- data %>% filter(Region =='Kuskokwim')
data_long_Kukskokwim <- gather(data_Kuskokwim, key= "DataType",value="Escapement", Escapement..weir., Escapement..tower., Escapement..sonar., Age, Aerial.Survey)
Kuskokwim.plot<- ggplot(data = data_long_Kuskokwim, aes(x = Year,  y=DataType, size = Escapement, col=DataType)) + geom_point(alpha=0.7)+
facet_wrap(~Location)+
scale_size(range = c(2, 2), limits = c(0.5, 1.5))
Kuskokwim.plot
data_Kuskokwim <- data %>% filter(Region =='Kuskokwim')
data_Kuskokwim
data_long_Kukskokwim <- gather(data_Kuskokwim, key= "DataType",value="Escapement", Escapement..weir., Escapement..tower., Escapement..sonar., Age, Aerial.Survey)
Kuskokwim.plot<- ggplot(data = data_long_Kuskokwim, aes(x = Year,  y=DataType, size = Escapement, col=DataType)) + geom_point(alpha=0.7)+
facet_wrap(~Location)+
scale_size(range = c(2, 2), limits = c(0.5, 1.5))
data_Kuskokwim <- data %>% filter(Region =='Kuskokwim')
data_long_Kuskokwim <- gather(data_Kuskokwim, key= "DataType",value="Escapement", Escapement..weir., Escapement..tower., Escapement..sonar., Age, Aerial.Survey)
Kuskokwim.plot<- ggplot(data = data_long_Kuskokwim, aes(x = Year,  y=DataType, size = Escapement, col=DataType)) + geom_point(alpha=0.7)+
facet_wrap(~Location)+
scale_size(range = c(2, 2), limits = c(0.5, 1.5))
Kuskokwim.plot
data_NortonSound <- data %>% filter(Region =='Norton Sound')
data_long_NortonSound <- gather(data_NortonSound, key= "DataType",value="Escapement", Escapement..weir., Escapement..tower., Escapement..sonar., Age, Aerial.Survey)
NortonSound.plot<- ggplot(data = data_long_NortonSound, aes(x = Year,  y=DataType, size = Escapement, col=DataType)) + geom_point(alpha=0.7)+
facet_wrap(~Location)+
scale_size(range = c(2, 2), limits = c(0.5, 1.5))
NortonSound.plot
data <- read.csv(file = 'ADFGDataSummary.csv')
runApp()
runApp()
data1<- read.csv(file = 'ADFGDataSummary.csv')
data2<- read.csv(file = 'ADFG_ASL.csv')
joined_df <- merge(data1, data2, by.x = "Location",
by.y = "Code", all.x = TRUE, all.y = FALSE)
joined_df <- merge(data1, data2, by.x = "Location",
all.x = TRUE)
joined_df <- merge(data1, data2, by = "Location",
all= TRUE)
joined_df
data1
data2
joined_df <- left_join(data1, data2, by = "Location",
all= TRUE)
joined_df
data1<- read.csv(file = 'ADFGDataSummary.csv')
data2<- read.csv(file = 'ADFG_ASL.csv')
joined_df <- left_join(data1, data2[,3:10], by = "Location",
all= TRUE)
joined_df
head(joined_df)
data1<- read.csv(file = 'ADFGDataSummary.csv')
data2<- read.csv(file = 'ADFG_ASL.csv')
joined_df <- left_join(data1, data2[,3:10], by = "Location",
all= TRUE)
head(joined_df)
data1<- read.csv(file = 'ADFGDataSummary.csv')
data2<- read.csv(file = 'ADFG_ASL.csv')
joined_df <- left_join(data1, data2[,3:10], by = "Location",
all= TRUE)
head(joined_df)
runApp()
data
data <- left_join(data1, data2[,3:10], by = "Location",
all= TRUE)
data
runApp()
head(data)
data <- left_join(data1, data2[,3:10], by = "Location", all= FALSE)%>%
filter_at(vars(Project_Type,Management_Area),all_vars(!is.na(.)))
runApp()
data.plot
data.plot
data.plot <- read.csv(file = 'DataSumm_EscHarAge.csv')
data.plot
shinyApp(
ui = fluidPage(theme = shinytheme("flatly"),
sidebarLayout(
sidebarPanel(
h3("Query Data"),
br(),
radioButtons(inputId = "Management_Area", #radio button for whether there is ASL data
label= "Management Area:",
c("Yukon (US)" = "Yukon (US)",
"Yukon (CA)" = "Yukon (CA)",
"Kuskokwim" = "Kuskokwim",
"Norton Sound" = "Norton Sound",
"Kotzebue" = "Kotzebue",
"All Areas" = "All"),
selected="All"),
radioButtons(inputId = "Project_Type", #radio button for whether there is ASL data
label= "Survey Type:",
c("Escapement Counts" = "Escapement Counts",
"Aerial Survey" = "Aerial Survey",
"All Data" = "All"),
selected="All"),
sliderInput("Number_of_Years", #slider for the minimum number of escapement observations
"Minimum Number of Years of Survey Observations:",
min = 0,
max = 60,
step=1,
value = 1),
sliderInput("Avg_Count", #radio button for the minimum escapement size
"Minimum Average Return:",
min = 0,
max = 5000,
step= 20,
value = 20),
sliderInput("Min_ASL", #radio button for the minimum escapement size
"Minimum Number of Years for ASL Data:",
min = 0,
max = 60,
step= 1,
value = 0),
actionButton(
"select_all_rows_button",
"View Selection on Map"
),
actionButton(
"clear_rows_button",
"Clear Map Selection"
)
),
mainPanel(
h4("Map of Data"),
leafletOutput(
"my_leaflet"
),
h4("Data Inventory"),
DTOutput(
"my_datatable"
)
)
)
)
,
server = function(session, input, output) {
#Creating a reactive dataset that can be filtered by the slider and the radio buttons from the ui
filtered_data <- reactive({
data <-  data %>%
filter(Number_of_Years >= input$Number_of_Years &
Avg_Count >= input$Avg_Count &
Number_of_Years_ASL >= input$Min_ASL)
#assigning the correct filtering for management area
if(input$Management_Area == "Yukon (US)"){
data <- data %>% filter(Management_Area == "Yukon")
}else{
if(input$Management_Area == "Yukon (CA)"){
data<-  data %>% filter(Management_Area == "Yukon - Canada")
}else{
if(input$Management_Area == "Kuskokwim"){
data<-  data %>% filter(Management_Area == "Kuskokwim")
}else{
if(input$Management_Area == "Kotzebue"){
data<-  data %>% filter(Management_Area == "Kotzebue")
}else{
if(input$Management_Area == "Norton Sound"){
data<-  data %>% filter(Management_Area == "Norton Sound/Port Clarence")
}else{
data
}
}
}
}
}
#assigning the correct filtering for survey type
if(input$Project_Type == "Escapement Counts"){
data <- data %>% filter(Project_Type == "Escapement")
}else{
if(input$Project_Type == "Aerial Survey"){
data<-  data %>% filter(Project_Type == "Aerial Survey")
}else{
data
}
}
})
#creating the output data table that will be filtered by the slider and the buttons
output$my_datatable <- renderDT({
filtered_data() %>%
datatable( rownames = FALSE,  class = "display", fillContainer = T,
options = list( scrollX = TRUE,
paging = FALSE))
})
pal <- colorFactor(c("navy", "red"), domain = c("Escapement", "Aerial Survey"))
# base map that we will add points to with leafletProxy(), using a proxy means the map does not need to be redrawn
output$my_leaflet <- renderLeaflet({
leaflet() %>%
addProviderTiles(
provider = providers$CartoDB.Positron,
options = providerTileOptions(
noWrap = FALSE
)
) %>%
setView(
lat = 62.8883491, #the map can zoom, but this is the default area it is centered on
lng = -160.5594136,
zoom = 4
)
})
#this initiates and event that allows selected rows in the data table to pop up on the map, using the "clear all"
#and 'select all" action button initiated in the ui
observeEvent(input$my_datatable_rows_selected, {
selected_lats <- eventReactive(input$my_datatable_rows_selected, {
as.list(filtered_data()$Latitude[c(unique(input$my_datatable_rows_selected))])
})
selected_longs <- eventReactive(input$my_datatable_rows_selected, {
as.list(filtered_data()$Longitude[c(unique(input$my_datatable_rows_selected))])
})
selected_location <- eventReactive(input$my_datatable_rows_selected, {
as.list(filtered_data()$Location[c(unique(input$my_datatable_rows_selected))])
})
selected_management <- eventReactive(input$my_datatable_rows_selected, {
as.list(filtered_data()$Management_Area[c(unique(input$my_datatable_rows_selected))])
})
selected_type <- eventReactive(input$my_datatable_rows_selected, {
as.list(filtered_data()$Project_Type[c(unique(input$my_datatable_rows_selected))])
})
selected_avg <- eventReactive(input$my_datatable_rows_selected, {
as.list(filtered_data()$Avg_Count[c(unique(input$my_datatable_rows_selected))])
})
selected_nyears <- eventReactive(input$my_datatable_rows_selected, {
as.list(filtered_data()$Number_of_Years[c(unique(input$my_datatable_rows_selected))])
})
# this is the data that will be passed to the leaflet in the addCircleMarkers argument,
# as well as the popups when the points are hovered over
map_df <- reactive({
tibble(lat = unlist(selected_lats()),
lng = unlist(selected_longs()),
location = unlist(selected_location()),
management = unlist(selected_management()),
nyears = unlist(selected_nyears()),
average = unlist(selected_avg()),
type = unlist(selected_type()))
})
leafletProxy("my_leaflet", session) %>%
clearMarkers() %>%
addCircleMarkers(
data = map_df(),
lng = ~lng,
lat = ~lat,
stroke = TRUE,
color = ~pal(type),
radius = 1,
weight = ~nyears/2,
fillOpacity = 0.4,
popup = paste0("Name: ", map_df()$location, "<br>",
"Region: ", map_df()$management, "<br>",
"Data Type: ", map_df()$type, "<br>",
"Average Return: ", map_df()$average, "<br>",
"# Years of Escapement Data: ", map_df()$nyears)
)
})
# create a proxy to modify datatable without recreating it completely
DT_proxy <- dataTableProxy("my_datatable")
# clear row selections when clear_rows_button is clicked
observeEvent(input$clear_rows_button, {
selectRows(DT_proxy, NULL)
})
# clear markers from leaflet when clear_rows_button is clicked
observeEvent(input$clear_rows_button, {
clearMarkers(leafletProxy("my_leaflet", session))
})
# select all rows when select_all_rows_button is clicked
observeEvent(input$select_all_rows_button, {
selectRows(DT_proxy, input$my_datatable_rows_all)
})
}
,
options = list(height = 500)
)
data <- read.csv(file = 'ADFG_Harvest.csv')
shinyApp(
ui = fluidPage(
sidebarLayout(
sidebarPanel(
h3("Query Data"),
br(),
radioButtons(inputId = "Region", #radio button for whether there is ASL data
label= "Region:",
c("Yukon (US)" = "Yukon (US)",
"Kuskokwim" = "Kuskokwim",
"Norton Sound" = "Norton Sound",
"Kotzebue" = "Kotzebue",
"All Areas" = "All"),
selected="All")),
mainPanel(
DTOutput(
"my_datatable"
)
)
)
),
server = function(input, output) {
#Creating a reactive dataset that can be filtered by the slider and the radio buttons from the ui
filtered_data <- reactive({
#assigning the correct filtering for management area
if(input$Region == "Yukon (US)"){
data <- data %>% filter(Region == "Yukon (US)")
}else{
if(input$Region == "Kuskokwim"){
data<-  data %>% filter(Region == "Kuskokwim")
}else{
if(input$Region == "Kotzebue"){
data<-  data %>% filter(Region == "Kotzebue")
}else{
if(input$Region == "Norton Sound"){
data<-  data %>% filter(Region == "Norton Sound")
}else{
data
}
}
}
}
#creating the output data table that will be filtered by the slider and the buttons
output$my_datatable <- renderDT({
filtered_data() %>%
datatable( rownames = FALSE,  class = "display", fillContainer = T,
options = list( scrollX = TRUE,
paging = FALSE))
})
})
data <- read.csv(file = 'ADFG_Harvest.csv')
shinyApp(
ui = fluidPage(
sidebarLayout(
sidebarPanel(
h3("Query Data"),
br(),
radioButtons(inputId = "Region", #radio button for whether there is ASL data
label= "Region:",
c("Yukon (US)" = "Yukon (US)",
"Kuskokwim" = "Kuskokwim",
"Norton Sound" = "Norton Sound",
"Kotzebue" = "Kotzebue",
"All Areas" = "All"),
selected="All")),
mainPanel(
DTOutput(
"my_datatable"
)
)
)
),
server = function(input, output) {
#Creating a reactive dataset that can be filtered by the slider and the radio buttons from the ui
filtered_data <- reactive({
#assigning the correct filtering for management area
if(input$Region == "Yukon (US)"){
data <- data %>% filter(Region == "Yukon (US)")
}else{
if(input$Region == "Kuskokwim"){
data<-  data %>% filter(Region == "Kuskokwim")
}else{
if(input$Region == "Kotzebue"){
data<-  data %>% filter(Region == "Kotzebue")
}else{
if(input$Region == "Norton Sound"){
data<-  data %>% filter(Region == "Norton Sound")
}else{
data
}
}
}
}
#creating the output data table that will be filtered by the slider and the buttons
output$my_datatable <- renderDT({
filtered_data() %>%
datatable( rownames = FALSE,  class = "display", fillContainer = T,
options = list( scrollX = TRUE,
paging = FALSE))
})
})
data.har <- read.csv(file = 'ADFG_Harvest.csv')
filtered_data <- reactive({
data.har)
#assigning the correct filtering for management area
if(input$Region == "Yukon (US)"){
data <- data %>% filter(Region == "Yukon")
}else{
if(input$Region == "Yukon (CA)"){
data<-  data %>% filter(Region == "Yukon - Canada")
}else{
if(input$Region == "Kuskokwim"){
data<-  data %>% filter(Region == "Kuskokwim")
}else{
if(input$Region == "Kotzebue"){
data<-  data %>% filter(Region == "Kotzebue")
}else{
if(input$Region == "Norton Sound"){
data<-  data %>% filter(Region == "Norton Sound/Port Clarence")
}else{
data
}
}
}
}
}
}
filtered_data <- reactive({
data.har)
#assigning the correct filtering for management area
if(input$Region == "Yukon (US)"){
data <- data %>% filter(Region == "Yukon")
}else{
if(input$Region == "Yukon (CA)"){
data<-  data %>% filter(Region == "Yukon - Canada")
}else{
if(input$Region == "Kuskokwim"){
data<-  data %>% filter(Region == "Kuskokwim")
}else{
if(input$Region == "Kotzebue"){
data<-  data %>% filter(Region == "Kotzebue")
}else{
if(input$Region == "Norton Sound"){
data<-  data %>% filter(Region == "Norton Sound/Port Clarence")
}else{
data
}
}
}
}
}
}
data <- data %>% filter(Region == "Yukon (US)")
data.har<-  data.har %>% filter(Region == "Norton Sound/Port Clarence")
data.har <- read.csv(file = 'ADFG_Harvest.csv')
shinyApp(
data.ASL <- read.csv(file = 'ADFG_ASL.csv')
